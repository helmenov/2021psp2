# このファイルでは、Python で扱う文字列の基礎として
# 文字列リテラルの書き方と、特殊文字の書き方を学びます。
# 途中で出てくる問題を解いてください。

#==== 記号について ==========================================================
# 日本語キーボード109（ウィンドウズキーがある日本語用キーボード）で解説します。
# 記号'（キーボードの7の上）をシングルクォートといいます。
# 記号"（キーボードの2の上）をダブルクォートといいます。
# 記号`（キーボードの@の上）をアポストロフィといいます。記号'と似ていますが違います。
# 記号\（キーボードのBackspace付近の￥のこと）をバックスラッシュといいます。
# 記号￥と記号\は中身は同じです。見た目がOSに応じて変わります。

#==== 文字列の書き方 =================================================
# シングルクォートで囲った文字列は文字列リテラルとして認識されます。'abcdefg'
# ダブルクォートで囲った文字列は文字列リテラルとして認識されます。"abcdefg"
# シングルクォートで囲った場合とダブルクォートで囲った場合に違いはありません。
# ※Python では違いがありませんが、Perlという言語では違いがあります。
# 'aaa" や "bbb' のように異なるクォートで囲うのは文字列として認識されません。
# '' や "" のように間に何もない文字列を空文字といいます。
# 例
name = 'Hiroyuki Takada'
print(name)
print(type(name))
#--------------------------------------------------------------------------
# 問(i) '18' （クォート記号も含める）を変数 x に代入して、変数 x を表示してください。

# 問(ii) 変数 x の型を調べて下さい。


#==== エスケープシーケンス ==================================================
# エスケープシーケンスは特殊文字の表記法です。
# よく使うエスケープシーケンスを以下に述べます。
# 参考サイト https://www.javadrive.jp/python/string/index2.html
# \\ バックスラッシュ(\)
# \' シングルクォート(')
# \" ダブルクォート(")
# \n ASCII(LF) 改行
# \t ASCII(TAB) 水平タブ
# 例1 'That\'s ok.' は文字列 That's ok. として扱われます。
# 例2 '\\\"' は文字列 \" として扱われます。
#-------------------------------------------------------------------------
# 問(iii) 'hello\tworld\nhello\tworld\nhello\tworld' （クォートを含めない部分）を出力してください。


#==== raw 文字列 =========================================================
# 文字列リテラルの前に r をつけるとエスケープシーケンスを無効化します。
# 例
rawstring= r'aa\taa'
print(rawstring)

#==== 複数行に渡る文字列リテラル ============================================
# '''と''' で囲うと複数行に渡る文字列になります。
# ''' の代わりに """ も使えます。
# r接頭辞をつけることでraw文字列にできます。
# 例
neverbeentome = '''Hey lady, you, lady, cursin\' at your life
You\'re a discontednted mother and a rich inventive wife
I\'ve no doubt you dream about the things you\'ll never do
But I wish someone had a talked to me like I wanna talk to you
[Lylics from I've never been to me]
'''
#--------------------------------------------------------------------------
# 問(iv) 例で与えた neverbeentome をprint関数で表示してください。

# 問(v) 例で与えた neverbeentome の型を調べてください。

# 問(vi) 問(iv)と問(v) の間に空白行ができる理由を考えてください。
#==== 文字列同士の足し算 =====================================================
# 文字列同士を足すと、それらの文字列の連結を返します。
# 文字列に文字列ではないものを足すとエラーになります。
# 文字列はイミュータブルです。
# 例
first = '3'
second = '5'
third = '7'
sum= first+second+third
print(sum)
print(type(sum))
#--------------------------------------------------------------------------
# 問 (vii) 変数 first_name に自分の名前を、変数 family_name に自分の苗字を入れて、
#          それらを連結した結果を full_name に入れて、full_name を出力してください。

#==== 文字列の繰り返し =======================================================
# 文字列 s に int 型の数字 n （もしくはbool値）をかけると、
# s が n 回数分繰り返された文字列を返します。
# s と n のかける順番は入れ替えても同じ結果を返します。
# 例
print(2*'namamugi namagome namatamago ')
print('kaeru '+'pyoko ' * 2 + 'mi ' + 2* 'pyoko ')
print('Hello' * False)
#---------------------------------------------------------------------------
# 問(viii) 3 * 'pyoko ' *4 はどんな文字列になりますか？

# 問(ix) 文字列に0以下の整数をかけるとどうなりますか？

#==== 文字列の長さの取得 ====================================================
# 文字列 s の長さを取得するには len関数を用います。
# 長さは半角文字でも全角文字でも1つとカウントされます。
# 半角空白も1つの文字としてカウントされます。
# 例
s = '長崎大学 Nagasaki University'
print(len(s))
#--------------------------------------------------------------------------
# 問(x) 空文字列 '' の長さを測って下さい。

#==== 文字列のインデックス指定による文字取得=====================================
# 文字列[index] という書式で文字列の index 番目の文字を取得できます。
# 文字列は文字列リテラルもしくは変数名で指定します。
# インデックスは整数で指定します。0は先頭の文字を表します。
# インデックスが負の整数の場合は、-1が最後の文字を表し、
# インデックスが減っていくに従ってその前の文字を表します。
# 指定したインデックスに文字がない場合は string index out of range エラーになります。
# 例
# s='hello' とします。
# s[0]は'h'です。
# s[1]は'e'です。
# s[2]は'l'です。
# s[3]は'l'です。
# s[4]は'o'です。
# この場合、 n が 5 以上のときは index out of range のエラーがでます。
# s[-1]は'o'です。
# s[-2]は'l'です。
# s[-3]は'l'です。
# s[-4]は'e'です。
# s[-5]は'h'です。
# この場合、n が -6 以下のときも、 index out of range のエラーがでます。
#--------------------------------------------------------------------------
# 問(xi) string = '2020/10/26 12:50' としたときの string[4] と string[-4] を
#        表示してください。

#==== スライス =============================================================
# スライスは文字列 s から部分文字列を取得するのに使用できます。
# 書式は s[start:end:step] です。
# index がstart の位置から end-1 の位置までの部分文字列に対し、
# step 毎に文字を取得してできる部分文字列を返します。
# start を省略するとstart は先頭 index （すなわち0）に設定したものと同じです。
# end を省略すると、最終 index に設定したものと同じです。
# １つ目のコロン:は省略できません。
# ２つ目のコロン:を省略するとstep=1 として :1 を書いたのと同じ扱いになります。
# step を負の整数に設定するとindexの順序が逆向きになります。
# 例
s='0123456789'
print(s[3:9:1])
print(s[3:9])
print(s[3:9:2])
print(s[2:8:-1])
print(s[8:2:-1])
print(s[8:2:-2])
print(s[:9:3])
print(s[::3])
print(s[:])
#--------------------------------------------------------------------------
# 問 (xii) 以下の data からxxとxxの間に挟まれた文字列を逆順に抜き出してください。
#          なお、期待される結果はmikanです。
data="enadxxnakimxxiama"


#==== 文字列への型変換 =======================================================
# 文字列っぽいものはたいてい文字列に変換できます。
# 変換したい対象を x としたとき str(x) とすることで文字列型の値になります。
# 例
# int 型リテラル 10100010 を文字列に変換します。
x = 10100010
y = str(x)
print(type(x),x)
print(type(y),y)
#--------------------------------------------------------------------------
# 問 (xiii) 以下の変数 d の型を表示し、d を文字列型に変換してください。
import datetime
d = datetime.datetime.now()
print(d)

#==== 入力 =================================================================
# input() 関数はコマンドプロンプトからの入力を待ち、受け取ることができる。
# input(文字列s) とすることで、文字列sを出力してから入力待ちにできる。
# 受け取った文字列を変数recieved_string に保存するには以下の書式に従う。
# recieved_string = input(文字列s)
# 受け取るものは数値に見えたとしても、その型は文字列型であるので、int型やfloat型
# として扱いたいときには型変換(int(), float()) が必要である。
# 例
x = input('please input a float number：\n')
y = float(x)
print(type(x), x)
print(type(y), y)
#--------------------------------------------------------------------------
# 問 (xiv) input() を2回用いて、2つの値の和と積を表示するプログラムを作成してください。

#==========================================================================
# b501.py の問題は、疑問点がなくなれば終了です。提出する必要はありません。
# ただ、提出不要とはいっても、今後の課題を解くために必要な知識ですので、
# 必ず理解した状態で次の課題へ進んでください。
#==========================================================================
