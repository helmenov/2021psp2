#=========================知識============================================================
# 型の調べ方
# Python では予約語を除いてほとんどのものがオブジェクトとして扱われる。
# 型はオブジェクトの定義域を表す。例えばint型は整数全体を意味する。float型は実数全体を意味する。
# オブジェクトの型を調べるときは type(オブジェクト）もしくはtype(オブジェクトの変数名）とする。
# 例 1 というデータの型を調べる
# print(type(1))
# 例 pi=3.14 となっているときpi の型を調べる。
# print(type(pi))

# オブジェクトに関連付けられた関数（メソッド）
# オブジェクト自身またはその変数を引数にして dir() を使用する。
# print(dir(1))
# print(dir(pi))
# __add__ などのメソッドは演算+に置き換えられる。
#
# オブジェクトのid()
# id()は引数にオブジェクト自身またはその変数を代入すると、そのオブジェクトが格納されている場所が表示される。
#
# ミュータブル、イミュータブル
# Pythonでは一度オブジェクトを作成するとそれ以降変更ができないイミュータブル型のオブジェクトと
# 内容が途中で変更できるミュータブル型のオブジェクトがある。
# 文字列やint型、float型などの1変数の変数はイミュータブル型であり、表面上はそれがわからないが、
# 演算などを行うとオブジェクトの id() が変化し、新たなメモリに計算結果を格納しているのがわかる。
# ミュータブルであれば、idは変化しないはずである。
# より簡単な説明：ミュータブルな場合は消しゴムで消して書き直すのと同じ。
# イミュータブルな場合は、計算はすべてボールペンで行い、計算結果は空きスペースに書き込んでいく。
# イミュータブル変数は、計算過程も残るので、間違えたとしてもどこで間違えているかすぐにわかる。しかしメモリを食う。
# ミュータブル変数は、省メモリであるが、書き換えてしまうのでバグを発見しにくい。
# 時代とともにイミュータブルにシフトしても平気になった。
#========================ここまで知識=======================================================

#========================ここから課題=======================================================
# 課題a404
# 例題に習い、以下の問に答えるためのプログラムをかけ。
# 完成したプログラムを実行して出力結果をa404.txt に保存せよ。
# python a404.py > a404.txt
# 
#-----------------------------------------------------------------------------------------
# 例題(o) リテラル 1 の型を調査せよ。
print(type(1))
#-----------------------------------------------------------------------------------------
# 問 (i) リテラル 3.14 の型を調査せよ。

#-----------------------------------------------------------------------------------------
# 問 (ii) x=1 と宣言して、変数 x の型を調査せよ。


#-----------------------------------------------------------------------------------------
# 問 (iii) pi=3.14 と宣言して、変数 pi の型を調査せよ。


#-----------------------------------------------------------------------------------------
# 問 (iv) リテラル True の型を調査せよ。 

#-----------------------------------------------------------------------------------------
# 問 (v) リテラル False の型を調査せよ。 

#-----------------------------------------------------------------------------------------
# 問 (vi) リテラル 'hello world' の型を調査せよ。

#-----------------------------------------------------------------------------------------
# 問 (vii) f=lambda x:x**2 と宣言し、fの型を調査せよ。


#-----------------------------------------------------------------------------------------
# 例題 (oo) int型のオブジェクトに対して dir() コマンドを利用して使用できる命令の一覧を表示せよ。

#-----------------------------------------------------------------------------------------
# 問 (viii) float型のオブジェクトに対して dir()コマンドを利用して使用できる命令の一覧を表示せよ。

#-----------------------------------------------------------------------------------------
# 例題 (ooo) 1, 2-1, 3-2, 4-3, 100-99 の計算結果のid()を調べよ。

#-----------------------------------------------------------------------------------------
# 問 (ix) 1, 3//2, 3%2 のid および それらを変数に代入して変数のidを調べよ。




#-----------------------------------------------------------------------------------------
# 問 (x) 3.14, 6.28/2, z=6.28/2 と宣言したときの z のid は同じか。


#-----------------------------------------------------------------------------------------
# 問 (xi) 例題(ooo) 、問(ix)、問(x) の結果を見て、
#         同じ数値を表すオブジェクトのidは必ず同じか否かをコメントに考察せよ。
#
#
#-----------------------------------------------------------------------------------------
